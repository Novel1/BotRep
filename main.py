import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
    JobQueue
)
import requests
from telegram import ReplyKeyboardRemove
import random
from datetime import datetime, timedelta
import csv
import io
import os
import requests
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
CHOOSING, TYPING_WISH, TYPING_SOUL, HOLIDAY_NAME, HOLIDAY_STYLE = range(5)
ADMIN_ID = int(os.getenv('1291710833', 1291710833))  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
RESPONSES = {
    'adventure': {
        'text': "–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º –≤ –±–ª–∏–∂–∞–π—à–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ!",
        'image': 'https://upload.wikimedia.org/wikipedia/ru/3/37/Adventure_Time_-_Title_card.png'
    },
    'something_new': "–ë—É–¥—å –≥–æ—Ç–æ–≤–∞ –∏—Å–ø—ã—Ç–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ!",
    'breakfast': "–û–∂–∏–¥–∞–π —Å—é—Ä–ø—Ä–∏–∑-–∑–∞–≤—Ç—Ä–∞–∫ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ!",
    'handmade': "–°–¥–µ–ª–∞–µ–º —á—Ç–æ-—Ç–æ —Å–≤–æ–∏–º–∏ —Ä—É–∫–∞–º–∏ ‚Äî –≥–æ—Ç–æ–≤—å—Å—è –∫ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤—É!",
    'snacks': {
        'drink': "–ñ–¥–∏, —è —É–∂–µ –≤ –ø—É—Ç–∏",
        'food': "–ñ–¥–∏, —è —É–∂–µ –≤ –ø—É—Ç–∏",
        'order': "–ù–∞–ø–∏—à–∏, —á—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª–∞ ‚Äî –±—É–¥–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–æ!"
    },
    'surprise': "–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî –æ—Ç –±—É—Å–∏–Ω–∫–∏ –¥–æ —á–µ–≥–æ-—Ç–æ –±–æ–ª—å—à–µ–≥–æ, —á–µ–º —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å",
    'hugs': "–ü–æ—Ä—Ü–∏—è –æ–±–Ω–∏–º–∞—à–µ–∫ —É–∂–µ –≤ –ø—É—Ç–∏ üíû",
    'care': "–í —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ —Ç—ã –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å –º–æ—é –∑–∞–±–æ—Ç—É",
    'shock': lambda: f"{random.randint(1, 100)}",
    'games': "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
    'flirt': "–ì–æ—Ç–æ–≤—å—Å—è –∫ –≤–µ—Å—ë–ª—ã–º –∏ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞–Ω–∏—è–º. –õ–µ–≥–∫–∏–π —Ñ–ª–∏—Ä—Ç –≤–∫–ª—é—á—ë–Ω!",
    'secret': "–¢—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∞ –∫–≤–µ—Å—Ç. –ñ–¥–∏ –ø–µ—Ä–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é...",
    'soul': "–°–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º –ø–æ–≥–æ–≤–æ—Ä–∏–º –ø–æ –¥—É—à–∞–º. –ù–∞–ø–∏—à–∏ —Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç",
    'about': "–Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Å—á–∞—Å—Ç—å—è üíò–ò, –∫—Å—Ç–∞—Ç–∏... —è ‚Äî –Ω–µ–±–æ–ª—å—à–æ–π, –Ω–æ –æ—Å–æ–±–µ–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –Ω–∞—à—É –≥–æ–¥–æ–≤—â–∏–Ω—É üéÅ‚ù§Ô∏è",
    'settings': "–†–∞–∑–¥–µ–ª –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ"
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_KEYBOARD = [
    ["üò± –£–¥–∏–≤–∏ –º–µ–Ω—è", "ü™Ñ –ß—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ"],
    ["üç≥ –•–æ—á—É –∑–∞–≤—Ç—Ä–∞–∫ –≤ –ø–æ—Å—Ç–µ–ª—å", "üß∞ –ö—Ä—É–∂–æ–∫ –û—á—É–º–µ–ª—ã–µ —Ä—É—á–∫–∏"],
    ["‚ûï –í—Ä–µ–º—è –¥–ª—è –≤–∫—É—Å–Ω—è—à–µ–∫", "üì¶ –•–æ—á—É —Å—é—Ä–ø—Ä–∏–∑"],
    ["üß∏ –•–æ—á—É –æ–±–Ω–∏–º–∞—à–µ–∫", "üß¥ –ó–∞–±–æ—Ç–∞ –∏ –≤–Ω–∏–º–∞–Ω–∏–µ"],
    ["üé≤ –®–æ–∫-–∫–æ–Ω—Ç–µ–Ω—Ç", "üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã"],
    ["ü™Ñ –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ", "üéâ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã"],
    ["üíÉ –§–ª–∏—Ä—Ç-—Ä–µ–∂–∏–º", "üíå –°–µ–∫—Ä–µ—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å"],
    ["üß† –î–ª—è –¥—É—à–∏", "‚öôÔ∏è –û –Ω–∞—Å / –ü–æ–º–æ—â—å"]
]

# –ú–µ–Ω—é –≤–∫—É—Å–Ω—è—à–µ–∫
SNACKS_KEYBOARD = [
    ["üçπ –ü–æ–ø–∏—Ç—å", "üçî –ü–æ–∫—É—à–∞—Ç—å"],
    ["üìù –ó–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å"],
    ["üîô –ù–∞–∑–∞–¥"]
]

# –ú–µ–Ω—é "–û –Ω–∞—Å"
ABOUT_KEYBOARD = [
    ["ü§ñ –ò–Ω—Ñ–æ –æ –±–æ—Ç–µ"],
    ["üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
    ["‚öôÔ∏è –ê–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º"],
    ["üîô –ù–∞–∑–∞–¥"]
]

# –ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
ADMIN_KEYBOARD = [
    ["üëÅÔ∏è –õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"],
    ["üõéÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "üì• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–∂–µ–ª–∞–Ω–∏–π"],
    ["üîô –ù–∞–∑–∞–¥"]
]

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤—Ä–µ–º–µ–Ω–Ω–∞—è)
users_wishes = {}
activity_log = []
user_requests = []
notification_enabled = True
last_surprise_date = {}


def log_activity(user_id: int, action: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    entry = f"{timestamp} - {user_id} - {action}"
    activity_log.append(entry)
    logger.info(entry)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await show_main_menu(update, "–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—ã—à–∫–æ! üíì\n–í—ã–±–∏—Ä–∞–π, —á–µ–≥–æ —Ç–µ–±–µ —Ö–æ—á–µ—Ç—Å—è:")


async def show_main_menu(update: Update, text: str):
    await update.message.reply_text(
        text,
        reply_markup=ReplyKeyboardMarkup(
            MAIN_KEYBOARD,
            resize_keyboard=True,
            one_time_keyboard=False
        )
    )
    return ConversationHandler.END


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ---
async def surprise_me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–£–¥–∏–≤–∏ –º–µ–Ω—è")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL
        response = requests.get(RESPONSES['adventure']['image'])
        photo = BytesIO(response.content)
        photo.name = 'adventure_time.jpg'

        await update.message.reply_photo(
            photo=photo,
            caption=RESPONSES['adventure']['text']
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text(RESPONSES['adventure']['text'])


async def something_new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ß—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ")
    await update.message.reply_text(RESPONSES['something_new'])


async def breakfast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ó–∞–≤—Ç—Ä–∞–∫ –≤ –ø–æ—Å—Ç–µ–ª—å")
    await update.message.reply_text(RESPONSES['breakfast'])


async def handmade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–û—á—É–º–µ–ª—ã–µ —Ä—É—á–∫–∏")
    await update.message.reply_text(RESPONSES['handmade'])


async def surprise(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–•–æ—á—É —Å—é—Ä–ø—Ä–∏–∑")
    last_surprise_date[user.id] = datetime.now()
    await update.message.reply_text(RESPONSES['surprise'])


async def hugs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–•–æ—á—É –æ–±–Ω–∏–º–∞—à–µ–∫")
    await update.message.reply_text(RESPONSES['hugs'])


async def care(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ó–∞–±–æ—Ç–∞ –∏ –≤–Ω–∏–º–∞–Ω–∏–µ")
    await update.message.reply_text(RESPONSES['care'])


async def shock_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–®–æ–∫-–∫–æ–Ω—Ç–µ–Ω—Ç")
    await update.message.reply_text(RESPONSES['shock']())


async def games(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ú–∏–Ω–∏-–∏–≥—Ä—ã")
    await update.message.reply_text(RESPONSES['games'])


async def flirt_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–§–ª–∏—Ä—Ç-—Ä–µ–∂–∏–º")
    await update.message.reply_text(RESPONSES['flirt'])


async def secret_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–°–µ–∫—Ä–µ—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å")
    await update.message.reply_text(RESPONSES['secret'])


async def about_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ò–Ω—Ñ–æ –æ –±–æ—Ç–µ")
    await update.message.reply_text(RESPONSES['about'])


async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    await update.message.reply_text(RESPONSES['settings'])


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –≤–∫—É—Å–Ω—è—à–µ–∫ ---
async def snacks_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ú–µ–Ω—é –≤–∫—É—Å–Ω—è—à–µ–∫")
    await update.message.reply_text(
        "–í—ã–±–∏—Ä–∞–π:",
        reply_markup=ReplyKeyboardMarkup(SNACKS_KEYBOARD, resize_keyboard=True)
    )


async def snacks_drink(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ü–æ–ø–∏—Ç—å")
    await update.message.reply_text(RESPONSES['snacks']['drink'])
    await show_main_menu(update, "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?")


async def snacks_food(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ü–æ–∫—É—à–∞—Ç—å")
    await update.message.reply_text(RESPONSES['snacks']['food'])
    await show_main_menu(update, "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?")


# --- –î–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π ---
async def custom_wish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ")
    await update.message.reply_text("–ù–∞–ø–∏—à–∏, —á–µ–≥–æ —Ç–µ–±–µ —Ö–æ—á–µ—Ç—Å—è ‚Äî –∏ —è —ç—Ç–æ —Ä–µ–∞–ª–∏–∑—É—é!",
                                    reply_markup=ReplyKeyboardRemove())
    return TYPING_WISH


async def save_wish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    wish_text = update.message.text
    timestamp = datetime.now()
    user_requests.append((user.id, user.first_name, wish_text, timestamp))
    log_activity(user.id, f"–ü–æ–∂–µ–ª–∞–Ω–∏–µ: {wish_text}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if notification_enabled:
        try:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üéâ –ù–æ–≤–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –æ—Ç {user.first_name}!\n\n"
                     f"üí¨ –¢–µ–∫—Å—Ç: {wish_text}\n"
                     f"üïí –í—Ä–µ–º—è: {timestamp.strftime('%Y-%m-%d %H:%M')}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

    await update.message.reply_text("–ó–∞–ø–∏—Å–∞–ª! –°–∫–æ—Ä–æ —ç—Ç–æ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ ‚ú®")
    await show_main_menu(update, "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?")
    return ConversationHandler.END


# --- –î–∏–∞–ª–æ–≥ "–ü–æ –¥—É—à–∞–º" ---
async def soul_talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ü–æ –¥—É—à–∞–º")
    await update.message.reply_text(RESPONSES['soul'], reply_markup=ReplyKeyboardRemove())
    return TYPING_SOUL


async def save_soul_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    topic = update.message.text
    timestamp = datetime.now()
    user_requests.append((user.id, user.first_name, f"–¢–µ–º–∞ –ø–æ –¥—É—à–∞–º: {topic}", timestamp))
    log_activity(user.id, f"–¢–µ–º–∞ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {topic}")
    await update.message.reply_text("–•–æ—Ä–æ—à–æ, –æ–±—Å—É–¥–∏–º —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º üåô")
    await show_main_menu(update, "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?")
    return ConversationHandler.END


# --- –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã ---
async def holiday_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞:", reply_markup=ReplyKeyboardRemove())
    return HOLIDAY_NAME


async def holiday_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['holiday_name'] = update.message.text
    keyboard = [["üé¨ –í —Å—Ç–∏–ª–µ —Ñ–∏–ª—å–º–∞", "üè† –£—é—Ç–Ω–æ"], ["üòÇ –®—É—Ç–ª–∏–≤–æ"], ["üîô –ù–∞–∑–∞–¥"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return HOLIDAY_STYLE


async def holiday_style(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    style = update.message.text
    name = context.user_data.get("holiday_name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    log_activity(user.id, f"–ü—Ä–∞–∑–¥–Ω–∏–∫: {name}, –°—Ç–∏–ª—å: {style}")
    await show_main_menu(update, f"–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∞–∑–¥–Ω–∏–∫ ¬´{name}¬ª –≤ —Å—Ç–∏–ª–µ ¬´{style}¬ª –∑–∞–ø–∏—Å–∞–Ω!")
    return ConversationHandler.END


# --- –ú–µ–Ω—é "–û –Ω–∞—Å" ---
async def about_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_activity(user.id, "–ú–µ–Ω—é '–û –Ω–∞—Å'")
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=ReplyKeyboardMarkup(ABOUT_KEYBOARD, resize_keyboard=True)
    )


async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id == ADMIN_ID:
        log_activity(user.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        await update.message.reply_text(
            "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=ReplyKeyboardMarkup(ADMIN_KEYBOARD, resize_keyboard=True)
        )
        return CHOOSING
    await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    return ConversationHandler.END


# --- –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def export_wishes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    log_activity(user.id, "–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–∂–µ–ª–∞–Ω–∏–π")
    if not user_requests:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ–∂–µ–ª–∞–Ω–∏–π –ø—É—Å—Ç")
        return

    # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π CSV
    csv_data = io.StringIO()
    writer = csv.writer(csv_data)

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    writer.writerow(["–ò–º—è", "–ü–æ–∂–µ–ª–∞–Ω–∏–µ", "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è"])

    for username, wish, timestamp in user_requests:
        writer.writerow([
            username,
            wish,
            timestamp.strftime("%Y-%m-%d %H:%M")
        ])

    csv_data.seek(0)
    await update.message.reply_document(
        document=io.BytesIO(csv_data.getvalue().encode()),
        filename="romantic_wishes.csv",
        caption="–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π üåü"
    )


async def show_activity_log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    log_activity(user.id, "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤")
    if not activity_log:
        await update.message.reply_text("–õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—É—Å—Ç—ã")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π
    log_text = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n\n" + "\n".join(activity_log[-20:])
    await update.message.reply_text(log_text)


async def admin_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    global notification_enabled
    notification_enabled = not notification_enabled
    status = "–≤–∫–ª—é—á–µ–Ω—ã" if notification_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    log_activity(user.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status}")
    await update.message.reply_text(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ–∂–µ–ª–∞–Ω–∏—è—Ö —Ç–µ–ø–µ—Ä—å {status} üîî")


async def admin_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    log_activity(user.id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –±—ã–ª–∏ —Å—é—Ä–ø—Ä–∏–∑—ã
    reminder_text = "üéØ –°—Ç–∞—Ç—É—Å —Å—é—Ä–ø—Ä–∏–∑–æ–≤:\n\n"
    now = datetime.now()

    if not last_surprise_date:
        reminder_text += "–í—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ —Å—é—Ä–ø—Ä–∏–∑–æ–≤ üò¢"
    else:
        for user_id, last_date in last_surprise_date.items():
            days_passed = (now - last_date).days
            reminder_text += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: "

            if days_passed > 7:
                reminder_text += f"‚ùå –û—á–µ–Ω—å –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ —Å—é—Ä–ø—Ä–∏–∑–∞ ({days_passed} –¥–Ω–µ–π)"
            elif days_passed > 3:
                reminder_text += f"‚ö†Ô∏è –î–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ —Å—é—Ä–ø—Ä–∏–∑–∞ ({days_passed} –¥–Ω–µ–π)"
            else:
                reminder_text += f"‚úÖ –ù–µ–¥–∞–≤–Ω–æ –±—ã–ª —Å—é—Ä–ø—Ä–∏–∑ ({days_passed} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)"

            reminder_text += "\n"

    reminder_text += "\nüí° –°–æ–≤–µ—Ç: —Å–¥–µ–ª–∞–π—Ç–µ —Å—é—Ä–ø—Ä–∏–∑ —Å–µ–≥–æ–¥–Ω—è!"
    await update.message.reply_text(reminder_text)


# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" ---
async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_main_menu(update, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üíì")
    return ConversationHandler.END


# --- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def send_reminders(context: CallbackContext):
    job = context.job
    now = datetime.now()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–≥–¥–∞ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—é—Ä–ø—Ä–∏–∑
    for user_id, last_date in last_surprise_date.items():
        days_passed = (now - last_date).days

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 3 –¥–Ω–µ–π
        if days_passed >= 3:
            try:
                await context.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=f"üíå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
                         f"–í—ã –¥–∞–≤–Ω–æ –Ω–µ –¥–µ–ª–∞–ª–∏ —Å—é—Ä–ø—Ä–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.\n"
                         f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—é—Ä–ø—Ä–∏–∑ –±—ã–ª {days_passed} –¥–Ω–µ–π –Ω–∞–∑–∞–¥.\n\n"
                         f"–°–¥–µ–ª–∞–π—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–∏—è—Ç–Ω–æ–µ —Å–µ–≥–æ–¥–Ω—è! üíñ"
                )
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                last_surprise_date[user_id] = now
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
def setup_handlers(application):
    # –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            MessageHandler(filters.Regex(r"^‚öôÔ∏è –û –Ω–∞—Å / –ü–æ–º–æ—â—å$"), about_menu),
            MessageHandler(filters.Regex(r"^‚öôÔ∏è –ê–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º$"), admin_panel),
            MessageHandler(filters.Regex(r"^üìù –ó–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å$"), custom_wish),
            MessageHandler(filters.Regex(r"^ü™Ñ –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ$"), custom_wish),
            MessageHandler(filters.Regex(r"^üéâ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã$"), holiday_menu),
            MessageHandler(filters.Regex(r"^üß† –î–ª—è –¥—É—à–∏$"), soul_talk),
        ],
        states={
            TYPING_WISH: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_wish),
                MessageHandler(filters.Regex(r"^üîô –ù–∞–∑–∞–¥$"), back_to_main)
            ],
            TYPING_SOUL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_soul_topic),
                MessageHandler(filters.Regex(r"^üîô –ù–∞–∑–∞–¥$"), back_to_main)
            ],
            HOLIDAY_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, holiday_name),
                MessageHandler(filters.Regex(r"^üîô –ù–∞–∑–∞–¥$"), back_to_main)
            ],
            HOLIDAY_STYLE: [
                MessageHandler(filters.Regex(r"^(üé¨ –í —Å—Ç–∏–ª–µ —Ñ–∏–ª—å–º–∞|üè† –£—é—Ç–Ω–æ|üòÇ –®—É—Ç–ª–∏–≤–æ)$"), holiday_style),
                MessageHandler(filters.Regex(r"^üîô –ù–∞–∑–∞–¥$"), back_to_main)
            ],
            CHOOSING: [
                MessageHandler(filters.Regex(r"^üì• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–∂–µ–ª–∞–Ω–∏–π$"), export_wishes),
                MessageHandler(filters.Regex(r"^üëÅÔ∏è –õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏$"), show_activity_log),
                MessageHandler(filters.Regex(r"^üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è$"), admin_notifications),
                MessageHandler(filters.Regex(r"^üõéÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è$"), admin_reminders),
                MessageHandler(filters.Regex(r"^üîô –ù–∞–∑–∞–¥$"), back_to_main)
            ]
        },
        fallbacks=[CommandHandler('start', start)],
        allow_reentry=True
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(MessageHandler(filters.Regex(r"^üò± –£–¥–∏–≤–∏ –º–µ–Ω—è$"), surprise_me))
    application.add_handler(MessageHandler(filters.Regex(r"^ü™Ñ –ß—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ$"), something_new))
    application.add_handler(MessageHandler(filters.Regex(r"^üç≥ –•–æ—á—É –∑–∞–≤—Ç—Ä–∞–∫ –≤ –ø–æ—Å—Ç–µ–ª—å$"), breakfast))
    application.add_handler(MessageHandler(filters.Regex(r"^üß∞ –ö—Ä—É–∂–æ–∫ –û—á—É–º–µ–ª—ã–µ —Ä—É—á–∫–∏$"), handmade))
    application.add_handler(MessageHandler(filters.Regex(r"^üì¶ –•–æ—á—É —Å—é—Ä–ø—Ä–∏–∑$"), surprise))
    application.add_handler(MessageHandler(filters.Regex(r"^üß∏ –•–æ—á—É –æ–±–Ω–∏–º–∞—à–µ–∫$"), hugs))
    application.add_handler(MessageHandler(filters.Regex(r"^üß¥ –ó–∞–±–æ—Ç–∞ –∏ –≤–Ω–∏–º–∞–Ω–∏–µ$"), care))
    application.add_handler(MessageHandler(filters.Regex(r"^üé≤ –®–æ–∫-–∫–æ–Ω—Ç–µ–Ω—Ç$"), shock_content))
    application.add_handler(MessageHandler(filters.Regex(r"^üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã$"), games))
    application.add_handler(MessageHandler(filters.Regex(r"^üíÉ –§–ª–∏—Ä—Ç-—Ä–µ–∂–∏–º$"), flirt_mode))
    application.add_handler(MessageHandler(filters.Regex(r"^üíå –°–µ–∫—Ä–µ—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å$"), secret_level))
    application.add_handler(MessageHandler(filters.Regex(r"^ü§ñ –ò–Ω—Ñ–æ –æ –±–æ—Ç–µ$"), about_bot))
    application.add_handler(MessageHandler(filters.Regex(r"^üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏$"), settings))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é
    application.add_handler(MessageHandler(filters.Regex(r"^‚ûï –í—Ä–µ–º—è –¥–ª—è –≤–∫—É—Å–Ω—è—à–µ–∫$"), snacks_menu))
    application.add_handler(MessageHandler(filters.Regex(r"^üçπ –ü–æ–ø–∏—Ç—å$"), snacks_drink))
    application.add_handler(MessageHandler(filters.Regex(r"^üçî –ü–æ–∫—É—à–∞—Ç—å$"), snacks_food))

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    application.add_handler(MessageHandler(filters.Regex(r"^üîô –ù–∞–∑–∞–¥$"), back_to_main))


def main():
    application = ApplicationBuilder().token("8054818207:AAFq18jcwhO0h1i28mH-H2B_btNIMRyJLqQ").build()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ JobQueue –¥–æ—Å—Ç—É–ø–µ–Ω)
    if application.job_queue:
        application.job_queue.run_repeating(
            send_reminders,
            interval=timedelta(days=1),
            first=10
        )
    else:
        logger.warning("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

    setup_handlers(application)
    application.run_polling()


if __name__ == "__main__":
    main()
